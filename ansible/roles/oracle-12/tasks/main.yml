---
- name: install boto and botocore
  ansible.builtin.pip:
    name: ['boto', 'boto3', 'botocore']
    umask: "0022"

- name: Create RHEL8 Oracle Linux repo
  yum_repository:
    name: "Oracle Linux $releasever Latest (x86_64)"
    description: ol8_latest
    file: ol8-temp
    baseurl: http://yum.oracle.com/repo/OracleLinux/OL8/baseos/latest/x86_64
    gpgcheck: yes
    gpg_key: "https://yum.oracle.com/RPM-GPG-KEY-oracle-ol8"
    enabled: yes
    state: present

- name: Upgrade all OS packages
  ansible.builtin.dnf:
    name: "*"
    state: latest
    allowerasing: yes
    security: "{{ update_only_security_packages }}"
  when: update_packages
    
- name: Install Oracle Linux 8 Release Repo
  ansible.builtin.dnf:
    name: "oraclelinux-release-el8"
    state: present

- name: Install pre-req packages
  ansible.builtin.dnf:
    name: "{{ oracle_prequisite_packages }}"
    state: present

- name: Create Oracle sysctl config
  ansible.builtin.template:
    src: files/98-oracle.conf
    dest: /etc/sysctl.d/98-oracle.conf
    owner: root
    group: root

- name: Create Oracle security limits
  ansible.builtin.template:
    src: files/oracle-rdbms-server-12cR1-preinstall.conf
    dest: /etc/security/limits.d/oracle-rdbms-server-12cR1-preinstall.conf 
    owner: root
    group: root
    
- name: Create any groups required
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
    state: present
  loop: "{{ oracle_groups }}"

- name: Create any users required
  ansible.builtin.user:
    name: "{{ item.name }}"
    uid: "{{ item.uid }}"
    groups: "{{ item.groups }}"
    append: yes
  loop: "{{ oracle_users }}"


- name: Check if AWS ClI executable exists
  stat: 
    path: /usr/local/bin/aws
  register: aws_cli_stat

- name: "Get and install AWS CLI"
  block:
    - name: Download AWS CLI
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscli-exe-linux-x86_64.zip
        mode: '0644'

    - name: Extract AWS CLIv2 zip
      ansible.builtin.unarchive:
        src: /tmp/awscli-exe-linux-x86_64.zip
        dest: /tmp/
        remote_src: yes

    - name: Install AWS CLIv2
      ansible.builtin.command: sh /tmp/aws/install
      args:
        creates: /usr/local/bin/aws
  when: (aws_cli_stat.stat.exists == false) or (update_aws_cli)

- name: Disable Firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: stopped
    enabled: no
  when: ansible_virtualization_type != "docker"

- name: Put SELinux in permissive mode, logging actions that would be blocked.
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_virtualization_type != "docker"

- name: Create install directories for Oracle binaries
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: oracle
    group: oinstall
    mode: '0755'
  loop: 
    - /u01/app/oracle/product/12.1.0.2/db_1
    - /u01/software/
    
- name: "Get and unarchive installer files (test)"
  block:
    - name: Copy files from local dir to test host and unarchive
      ansible.builtin.unarchive:
        remote_src: no
        src: "{{ item }}"
        dest: "/u01/software/"
        mode: 0775
        owner: oracle
        group: oracle
      with_fileglob:
        - files/*.zip
  when: (ansible_virtualization_type == "docker") and ( install_oracle ) 

- name: "Get and unarchive installer files (remote)"
  block:
    - name: Copy files
      amazon.aws.aws_s3:
        bucket: "{{ aws_s3_release_bucket }}"
        object: "{{ item }}"
        dest: "/tmp/{{ item | basename }}"
        mode: get
        overwrite: different
        aws_access_key: "{{ aws_s3_release_bucket_access_key | default(omit) }}"
        aws_secret_key: "{{ aws_s3_release_bucket_secret_key | default(omit) }}"
      loop: "{{ aws_s3_release_object_paths }}"

    - name: Unarchive files 
      ansible.builtin.unarchive:
        remote_src: yes
        src: "/tmp/{{ item | basename }}"
        dest: "/u01/software/"
        mode: 0775
        owner: oracle
        group: oracle
      loop: "{{ aws_s3_release_object_paths }}"
  when: (ansible_virtualization_type != "docker") and ( install_oracle ) 

- name: Template oracle profile
  ansible.builtin.blockinfile:
    dest: "/home/oracle/.bash_profile"
    owner: oracle
    group: oracle
    mode: '0640'
    block: |
      # Oracle Settings
      export TMP=/tmp
      export TMPDIR=$TMP
      export ORACLE_HOSTNAME=REPLACEME
      export ORACLE_UNQNAME=cdb1
      export ORACLE_BASE=/u01/app/oracle
      export ORACLE_HOME=$ORACLE_BASE/product/12.1.0.2/db_1
      export ORACLE_SID=cdb1
      export PATH=/usr/sbin:$PATH
      export PATH=$ORACLE_HOME/bin:$PATH
      export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib
      export CLASSPATH=$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlib

- name: Install Oracle
  block: 
    - name: Download response file
      ansible.builtin.copy:
        src: oui12102.rsp
        dest: /tmp/
        owner: oracle
        group: oracle

    - name: Run Oracle Installer
      ansible.builtin.shell:
        cmd: "./runInstaller -silent -waitforcompletion -ignoreSysPrereqs -responseFile /tmp/oui12102.rsp"
        chdir: "/u01/software/database"
      become_user: oracle

    - name: Run Oracle installation postscripts
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop: 
        - "/u01/app/oraInventory/orainstRoot.sh"
        - "/u01/app/oracle/product/12.1.0.2/db_1/root.sh"
  when: install_oracle
